from fastapi import APIRouter, Depends, HTTPException, status, Request, Response, Form
from fastapi.security import OAuth2PasswordBearer
from fastapi.responses import HTMLResponse, RedirectResponse
from sqlalchemy.orm import Session
from sqlalchemy import text
from datetime import timedelta
import logging
import sys
import traceback

# Importaciones locales
from app.utils.db import get_db
from app.models.models import User
from app.schemas.schemas import UserCreate, UserResponse, Token
from app.core.templates import templates
from .utils import (
    authenticate_user, 
    create_access_token, 
    get_password_hash,
    verify_password,
    ACCESS_TOKEN_EXPIRE_MINUTES
)

# Configuraci√≥n del router
router = APIRouter(prefix="/auth", tags=["auth"])

def log_debug(message: str):
    """Funci√≥n para asegurar que los logs se muestren en la consola"""
    print(f"\n[DEBUG] {message}")
    sys.stdout.flush()

@router.post("/token")
async def login(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db)
):
    from .utils import log_auth  # Importar la funci√≥n de logging
    
    log_auth("\n" + "="*50)
    log_auth("üîê INICIO DEL PROCESO DE LOGIN")
    log_auth(f"üìß Email recibido: {username}")
    
    try:
        # Verificar conexi√≥n a DB
        log_auth("üìä Verificando conexi√≥n a base de datos...")
        try:
            db.execute(text("SELECT 1"))
            log_auth("‚úÖ Conexi√≥n a DB verificada")
        except Exception as e:
            log_auth(f"‚ùå Error de conexi√≥n a DB: {str(e)}")
            return templates.TemplateResponse(
                "auth/login.html",
                {"request": request, "error": "Error de conexi√≥n"},
                status_code=500
            )

        # Buscar usuario
        log_auth("üîç Buscando usuario en la base de datos...")
        user = db.query(User).filter(User.email == username).first()
        
        if not user:
            log_auth("‚ùå Usuario no encontrado")
            return templates.TemplateResponse(
                "auth/login.html",
                {"request": request, "error": "Email o contrase√±a incorrectos"},
                status_code=401
            )
        
        log_auth(f"‚úÖ Usuario encontrado: {user.email}")
        
        # Verificar contrase√±a
        if not verify_password(password, user.password):
            log_auth("‚ùå Contrase√±a incorrecta")
            return templates.TemplateResponse(
                "auth/login.html",
                {"request": request, "error": "Email o contrase√±a incorrectos"},
                status_code=401
            )
        
        log_auth("‚úÖ Autenticaci√≥n exitosa")
        
        # Crear token
        access_token = create_access_token(
            data={"sub": user.email},
            expires_delta=timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        )
        
        # Crear respuesta
        response = RedirectResponse(url="/", status_code=303)
        response.set_cookie(
            key="access_token",
            value=f"Bearer {access_token}",
            httponly=True,
            secure=True,
            samesite="lax",
            max_age=1800,
            path="/"
        )
        
        log_auth("‚úÖ Cookie establecida correctamente")
        log_auth("‚úÖ Login exitoso - Redirigiendo al dashboard")
        log_auth("="*50)
        return response
        
    except Exception as e:
        log_auth("\n‚ùå ERROR EN LOGIN:")
        log_auth(str(e))
        import traceback
        log_auth(traceback.format_exc())
        return templates.TemplateResponse(
            "auth/login.html",
            {"request": request, "error": "Error del servidor"},
            status_code=500
        )

@router.get("/login")
async def login_page(request: Request):
    log_debug("üìÑ Accediendo a la p√°gina de login")
    try:
        if request.cookies.get("access_token"):
            log_debug("üîÑ Usuario ya autenticado, redirigiendo al dashboard")
            return RedirectResponse(url="/", status_code=302)
        log_debug("üìù Mostrando formulario de login")
        return templates.TemplateResponse("auth/login.html", {"request": request})
    except Exception as e:
        log_debug(f"‚ùå Error en p√°gina de login: {str(e)}")
        log_debug(traceback.format_exc())
        return templates.TemplateResponse(
            "auth/login.html",
            {"request": request, "error": "Error cargando la p√°gina"},
            status_code=500
        )

@router.post("/register", response_model=UserResponse)
async def register(user: UserCreate, db: Session = Depends(get_db)):
    log_debug("\n" + "="*50)
    log_debug("üìù INICIO DEL PROCESO DE REGISTRO")
    log_debug(f"üìß Email a registrar: {user.email}")
    
    try:
        # Verificar si el usuario existe
        log_debug("üîç Verificando si el email ya existe...")
        db_user = db.query(User).filter(User.email == user.email).first()
        if db_user:
            log_debug("‚ùå El email ya est√° registrado")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="El email ya est√° registrado"
            )
        
        # Crear nuevo usuario
        log_debug("üîí Hasheando contrase√±a...")
        hashed_password = get_password_hash(user.password)
        
        log_debug("üë§ Creando nuevo usuario...")
        db_user = User(
            email=user.email,
            password=hashed_password,
            name=user.name
        )
        
        db.add(db_user)
        db.commit()
        db.refresh(db_user)
        
        log_debug("‚úÖ Usuario registrado correctamente")
        log_debug("="*50)
        return db_user
        
    except HTTPException as he:
        log_debug(f"‚ùå Error de validaci√≥n: {str(he.detail)}")
        raise he
    except Exception as e:
        log_debug("‚ùå Error en el proceso de registro:")
        log_debug(str(e))
        log_debug(traceback.format_exc())
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error al registrar usuario: {str(e)}"
        )

@router.get("/logout")
async def logout():
    log_debug("üö™ Iniciando proceso de logout")
    try:
        response = RedirectResponse(url="/auth/login", status_code=302)
        response.delete_cookie(
            key="access_token",
            path="/",
            secure=True,
            httponly=True
        )
        log_debug("‚úÖ Logout exitoso")
        return response
    except Exception as e:
        log_debug(f"‚ùå Error en logout: {str(e)}")
        log_debug(traceback.format_exc())
        return RedirectResponse(url="/auth/login", status_code=302)